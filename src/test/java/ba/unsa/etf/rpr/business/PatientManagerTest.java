package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.dao.PatientsDaoImpl;
import ba.unsa.etf.rpr.domain.Patients;
import ba.unsa.etf.rpr.exceptions.MyException;
import org.apache.commons.lang3.RandomStringUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

class PatientManagerTest {

    private PatientManager patientManager;
    private Patients patient;
    private PatientsDaoImpl patientsDaoMock;
    private List<Patients> list;

    @BeforeEach
    public void initialzeObjectsWeNeed(){
        patientManager = Mockito.mock(PatientManager.class);
        patient = new Patients();
        patient.setUsername("JohnDoe");
        patient.setId(50);

        patientsDaoMock = Mockito.mock(PatientsDaoImpl.class);
        list = new ArrayList<>();
        list.addAll(Arrays.asList(new Patients("EdnaGreen"), new Patients("HughPearce"),
                new Patients("AmyGeller"), new Patients("TomRiley"), new Patients("SethPark")));
    }

    @Test
    void validatePatientLogin() throws MyException {
        String correctName = "JohnDoe";
        try{
            Mockito.doCallRealMethod().when(patientManager).validateUsername(correctName);
        }catch (MyException e){
            e.printStackTrace();
            Assertions.assertTrue(false);
        }

        String incorrectUsernameShort = "E";
        Mockito.doCallRealMethod().when(patientManager).validateUsername(incorrectUsernameShort);
        MyException myException1 = Assertions.assertThrows(MyException.class, ()-> {
            patientManager.validateUsername(incorrectUsernameShort);}, "Username must be between 5 and 20 characters");
        assertEquals("Username must be between 5 and 20 characters", myException1.getMessage());

        String incorrectUsernameLong = RandomStringUtils.randomAlphabetic(50);
        Mockito.doCallRealMethod().when(patientManager).validateUsername(incorrectUsernameLong);
        MyException myException2 = Assertions.assertThrows(MyException.class, () -> {
            patientManager.validateUsername(incorrectUsernameLong);}, "Username must be between 5 and 20 characters");
        assertEquals("Username must be between 5 and 20 characters", myException2.getMessage());

    }

    @Test
    void add() throws MyException {

        MockedStatic<DaoFactory> daoFactoryMockedStatic = Mockito.mockStatic(DaoFactory.class);
        daoFactoryMockedStatic.when(DaoFactory::patientsDao).thenReturn(patientsDaoMock);

        when(DaoFactory.patientsDao().getAll()).thenReturn(list);
        Mockito.doCallRealMethod().when(patientManager).add(patient);
        MyException myException = Assertions.assertThrows(MyException.class, () -> {
            patientManager.add(patient);}, "Can't add patient with ID. ID is autogenerated");

        assertEquals("Can't add patient with ID. ID is autogenerated", myException.getMessage());
        daoFactoryMockedStatic.verify(DaoFactory::patientsDao);
        Mockito.verify(patientManager).add(patient);
        daoFactoryMockedStatic.close();
    }

    @Test
    public void findByUsername1(){

        String username = "JohnDoe";
        PatientManager patientManager = new PatientManager();
        Patients patient = patientManager.findByUsername(username);

        assertEquals(null, patient);

    }

    @Test
    public void findByUsername2(){

        String username = "EdnaGreen";
        PatientManager patientManager = new PatientManager();
        Patients patient = patientManager.findByUsername(username);

        assertEquals(1, patient.getId());

    }


    @Test
    public  void getById() throws MyException {

        int id = -1;
        PatientManager patientManager = new PatientManager();

        MyException myException = Assertions.assertThrows(MyException.class, ()->{
            patientManager.getById(id);}, "ID does not exist in the database");
        Assertions.assertEquals("ID does not exist in the database", myException.getMessage());

    }


}






